
#include <utility.h>
int read_str_frm_user(char **input_string, int input_str_count, int total_input_str)
{
	int i = 0;
	char *scan_str;

	scan_str = (char *)calloc(1, sizeof(char));
	printf("Enter the %d strings: ",input_str_count);
	for (i = 0; i < input_str_count; i++)
	{
		gets(scan_str);
		if (!strcasecmp(scan_str, "end"))
		{
			break;
		}
		total_input_str++;
		input_string[i] = (char *)calloc(1, (sizeof(char) * (strlen(scan_str) + 1)));
		strcpy(input_string[i], scan_str);
	}
	FREE(scan_str);
	return total_input_str;
}

int write_to_file(char **input_string, char *filename, int total_input_str)
{
	FILE *f_ptr = NULL;
	int i = 0;
	
	f_ptr = fopen(filename, "w");
	if (f_ptr == NULL)
	{
		printf("\nUnable to open file.");
		return FAILURE;
	}
	fprintf(f_ptr, "Recieved Input:");
	fprintf(f_ptr, "Total lines: %d", total_input_str);	
	for (i = 0; i <total_input_str; i++)
	{	
		fprintf(f_ptr, "%s", input_string[i]);
	}
	fclose(f_ptr);
	return SUCCESS;
}

 

int parse_string_and_print(char **input_string, int total_input_str)
{
	char 	*token = NULL,
		*g_str = NULL;
 	int 	i = 0,
		count_token = 0;
	gboolean freesgmnt = FALSE;

	printf("\nFiltered Output: ");
	for (i = 0; i < total_input_str; i++)
	{
		count_token = 0;
		GString *new_string = NULL;
		token = strtok(input_string[i], " ");
		new_string = g_string_new((gchar *)token);
		while (token != NULL)
		{
			new_string = g_string_append(new_string, " "); 
			new_string = g_string_append(new_string, (gchar *)token);
			token = strtok(NULL, " ");
			count_token++;
		}
		if (count_token >= 3)
		{
			new_string = g_string_append_c(new_string, '\0');
			g_str = (char *)calloc(1, (sizeof(char) * ((new_string->len) + 1)));
			strcpy(g_str, (char *)new_string->str);
			if ((strchr(g_str, '?')) || (strchr(g_str, '-')))
			{
				printf("\n%s\n",g_str);
			}
			g_string_free(new_string, freesgmnt);
		}
	}
	FREE(g_str);
	return SUCCESS;
}

void free_memory(char **input_string, int total_input_str)
{
	int i = 0;
	for (i = 0; i < total_input_str; i++)
	{
		FREE(input_string[i]);
	}
	FREE(input_string);
}
